edge(a, b).
edge(a, c).
edge(b, d).
edge(b, e).
edge(c, f).
edge(e, g).

% --- BFS Main Predicate ---
bfs(Start, Goal, Path) :-
    bfs_queue([[Start]], Goal, Path).

% --- If the first path in the queue reaches the Goal, we're done ---
bfs_queue([[Goal|Rest] | _], Goal, Path) :-
    reverse([Goal|Rest], Path).

% --- Otherwise, expand the first path and continue searching ---
bfs_queue([[Node|Rest] | Others], Goal, Path) :-
    findall([Next, Node|Rest],
            (edge(Node, Next), \+ member(Next, [Node|Rest])),
            NewPaths),
    append(Others, NewPaths, UpdatedQueue),
    bfs_queue(UpdatedQueue, Goal, Path).
